abs(a$BIC[1] - a$BIC[2]));
if( !is.na(a[2,"Pr(>Chisq)"]) )
{
s.a <- paste0(s.a,
sprintf(", *p*=%s", scinot(a[2,"Pr(>Chisq)"])));
}
# return value:
return (s.a);
}
# Bayesian comparison:
if( !is.null(b) )
{
s.b <- sprintf("BF: %s, ΔLOO(%s %s %s)=%.1f (%.1f), ΔWAIC(%s %s %s)=%.1f (%.1f), ΔKFOLD(%s %s %s)=%.1f (%.1f)",
# BF:
b$BF_interpretation,
# LOO:
rownames(b$LOO)[1],
ifelse(abs(b$LOO[1,1]-b$LOO[2,1]) < 4 || abs(b$LOO[1,1]-b$LOO[2,1]) < b$LOO[2,2], "≈", ifelse(abs(b$LOO[1,1]-b$LOO[2,1]) < 2*b$LOO[2,2], ">", ">>")),
rownames(b$LOO)[2],
abs(b$LOO[1,1]-b$LOO[2,1]), b$LOO[2,2],
# WAIC:
rownames(b$WAIC)[1],
ifelse(abs(b$WAIC[1,1]-b$WAIC[2,1]) < 4 || abs(b$WAIC[1,1]-b$WAIC[2,1]) < b$WAIC[2,2], "≈", ifelse(abs(b$WAIC[1,1]-b$WAIC[2,1]) < 2*b$WAIC[2,2], ">", ">>")),
rownames(b$WAIC)[2],
abs(b$WAIC[1,1]-b$WAIC[2,1]), b$WAIC[2,2],
# KFOLD:
rownames(b$KFOLD)[1],
ifelse(abs(b$KFOLD[1,1]-b$KFOLD[2,1]) < 4 || abs(b$KFOLD[1,1]-b$KFOLD[2,1]) < b$KFOLD[2,2], "≈", ifelse(abs(b$KFOLD[1,1]-b$KFOLD[2,1]) < 2*b$KFOLD[2,2], ">", ">>")),
rownames(b$KFOLD)[2],
abs(b$KFOLD[1,1]-b$KFOLD[2,1]), b$KFOLD[2,2]);
# return value:
return (s.b);
}
}
# Chunk 2
# Check if IE_recoding_adapted.Rmd was already ran or not:
if( !file.exists("./data/rough_r_data_IE.csv") )
{
stop(paste0("Please run first the ./IE_recoding_adapted.Rmd script to generate the ./data/rough_r_data_IE.csv file!"));
}
# Chunk 3
if( small_HTML ) cat("***N.B.*: please note that, in order to reduce the size of the resulting `HTML` document, some of the plots were not included here, being replced with a generic placeholder; please consult the full report in the [GitHub repository](https://github.com/ddediu/r-roughness-recoding).**");
if( small_PDF ) cat("***N.B.*: please note that, first, as this document's intended format is `HTML`, its conversion to `PDF` might result in some typographic issues, and, second, that in order to reduce its size the quality of the images and plots was degraded (but is still decent); please consult the full report in the [GitHub repository https://github.com/ddediu/r-roughness-recoding](https://github.com/ddediu/r-roughness-recoding).**");
# Chunk 4: load the revised data
# Load the recoded data:
rough_r_data    <- read.csv("./data/rough_r_data.csv"); # excluding the IE languages (the original)
rough_r_data_ie <- read.csv("./data/rough_r_data_IE.csv"); # including our recoding for the IE languages
# Excluding our recoding of the IE languages, as in the original:
rough_r_data %>%
dplyr::select(Language,revision,Trill) %>%
dplyr::filter(!is.na(revision)) %>%
dplyr::group_by(Trill) %>%
dplyr::distinct() %>% dplyr::select(revision) %>%
table() %>% as.data.frame() -> table_changes;
# Fix family and branch names:
rough_r_data$Family[ rough_r_data$Family == "Cams��" ] <- "Camsá";
rough_r_data$Family[ rough_r_data$Family == "Tuc��noan" ] <- "Tucanoan";
rough_r_data$Family[ rough_r_data$Family == "Choc�_" ] <- "Chocoan";
rough_r_data$Family[ rough_r_data$Family == "Hot�_" ] <- "Hoti";
rough_r_data$Family[ rough_r_data$Family == "Cof��n" ] <- "Cofán";
rough_r_data$Family[ rough_r_data$Family == "Moset��n" ] <- "Mosetén";
rough_r_data$Family[ rough_r_data$Family == "Truma�_" ] <- "Trumai";
rough_r_data$Family[ rough_r_data$Family == "Atacame��o" ] <- "Atacameño";
rough_r_data$Family[ rough_r_data$Family == "East Bird���s Head" ] <- "East Bird's Head";
rough_r_data$Branch[ rough_r_data$Branch == "Tupi-Guaran�_" ] <- "Tupi-Guarani";
rough_r_data$Branch[ rough_r_data$Branch == "Karaj��" ] <- "Karajá";
rough_r_data$Branch[ rough_r_data$Branch == "South Bird���s Head" ] <- "South Bird's Head";
# Kinds of changes due to our recoding:
table_changes_2 <- table_changes %>%
dplyr::mutate(Trill = ifelse(Trill=="yes","Trill","Other"),
revision = dplyr::case_when(revision == "ERROR" ~ "Error",
revision == "OUT" ~ "Contrast",
revision == "other" ~ "OTHER",
revision == "trilled" ~ "TRILL",
revision == "NA_" ~ "NA"),
revision = ifelse(is.na(revision),"NA",revision),
Data = ifelse(revision %in% c("TRILL","OTHER"),"Included","Excluded"));
table_changes_2$revision <- factor(table_changes_2$revision,levels = c("OTHER","Contrast","Error","NA","TRILL"));
data_R_revision_2 <- rough_r_data %>%
dplyr::select(Language,Latitude,Longitude,revision,Trill) %>%
dplyr::mutate(revision = ifelse(revision=="trilled","TRILL",
ifelse(revision=="other","OTHER","OLD")),
Data = ifelse(revision%in%c("TRILL","OTHER"),"NEW","OLD")) %>%
dplyr::distinct();
data_R_revision_2$revision <- factor(data_R_revision_2$revision,levels = c("OTHER","TRILL","OLD"));
# Load the original @winter_trilled_2022 results:
xling <- read.csv("./data/cross_linguistic.csv") %>%
dplyr::filter(Meaning %in% c("rough","smooth"),
Family!="Indo-European"); # do not include IE
# Fix family and branch names:
xling$Family[ xling$Family == "Cams\x92\x8d" ] <- "Camsá";
xling$Family[ xling$Family == "Tuc\x92\x8dnoan" ] <- "Tucanoan";
xling$Family[ xling$Family == "Choc\x92_" ] <- "Chocoan";
xling$Family[ xling$Family == "Hot\x92_" ] <- "Hoti";
xling$Family[ xling$Family == "Cof\x92\x8dn" ] <- "Cofán";
xling$Family[ xling$Family == "Moset\x92\xa9n" ] <- "Mosetén";
xling$Family[ xling$Family == "Truma\x92_" ] <- "Trumai";
xling$Family[ xling$Family == "Atacame\x92\xb1o" ] <- "Atacameño";
xling$Family[ xling$Family == "East Bird\x8a\x97\xc8s Head" ] <- "East Bird's Head";
xling$Branch[ xling$Branch == "Tupi-Guaran\x92_" ] <- "Tupi-Guarani";
xling$Branch[ xling$Branch == "Karaj\x92\x8d" ] <- "Karajá";
xling$Branch[ xling$Branch == "South Bird\x8a\x97\xc8s Head" ] <- "South Bird's Head";
xling$Meaning <- paste0("‘", xling$Meaning, "’");
xling$Meaning.f <- factor(xling$Meaning)#, levels=c("‘smooth’", "‘rough’"));
# only Google TRS data for Basque:
xling <- dplyr::filter(xling, !(Language=="Basque" & Dataset=="CLICS"));
# some languages happen to have more than one rough / smooth words (very small minority!)
# reduce to single data point via majority rule:
xling_single <- xling %>%
dplyr::filter(Trill=="yes") %>%
dplyr::group_by(Language,Meaning.f) %>%
dplyr::summarise(r = as.logical(round(mean(r))),
Longitude=Longitude[1],
Latitude=Latitude[1]) %>%
dplyr::ungroup();
data_R_revision <- rough_r_data; # rename our recoded data
xling_revision <- data_R_revision %>%
dplyr::filter(Meaning %in% c("rough","smooth"),
Family!="Indo-European") %>%
dplyr::mutate(Trill = dplyr::case_when(revision == "trilled" ~ "yes",
revision == "other" ~ "no",
revision %in% c("OUT","NA") ~ "OUT")) %>%
dplyr::filter(Trill != "OUT");
xling_revision$Meaning <- paste0("‘", xling_revision$Meaning, "’");
xling_revision$Meaning.f <- factor(xling_revision$Meaning)#, levels=c("‘smooth’", "‘rough’"));
# some languages happen to have more than one rough / smooth words (very small minority!)
# reduce to single data point via majority rule:
xling_single_revision <- xling_revision %>%
dplyr::filter(Trill=="yes") %>%
dplyr::group_by(Language,Meaning.f) %>%
dplyr::summarise(r = as.logical(round(mean(r))),
Longitude=Longitude[1],
Latitude=Latitude[1]) %>%
dplyr::ungroup();
# Including our recoding of the IE languages as well:
rough_r_data_ie %>%
dplyr::select(Language,revision,Trill) %>%
dplyr::filter(!is.na(revision)) %>%
dplyr::group_by(Trill) %>%
dplyr::distinct() %>% dplyr::select(revision) %>%
table() %>% as.data.frame() -> table_changes_ie;
# Fix family and branch names:
rough_r_data_ie$Family[ rough_r_data_ie$Family == "Cams��" ] <- "Camsá";
rough_r_data_ie$Family[ rough_r_data_ie$Family == "Tuc��noan" ] <- "Tucanoan";
rough_r_data_ie$Family[ rough_r_data_ie$Family == "Choc�_" ] <- "Chocoan";
rough_r_data_ie$Family[ rough_r_data_ie$Family == "Hot�_" ] <- "Hoti";
rough_r_data_ie$Family[ rough_r_data_ie$Family == "Cof��n" ] <- "Cofán";
rough_r_data_ie$Family[ rough_r_data_ie$Family == "Moset��n" ] <- "Mosetén";
rough_r_data_ie$Family[ rough_r_data_ie$Family == "Truma�_" ] <- "Trumai";
rough_r_data_ie$Family[ rough_r_data_ie$Family == "Atacame��o" ] <- "Atacameño";
rough_r_data_ie$Family[ rough_r_data_ie$Family == "East Bird���s Head" ] <- "East Bird's Head";
rough_r_data_ie$Branch[ rough_r_data_ie$Branch == "Tupi-Guaran�_" ] <- "Tupi-Guarani";
rough_r_data_ie$Branch[ rough_r_data_ie$Branch == "Karaj��" ] <- "Karajá";
rough_r_data_ie$Branch[ rough_r_data_ie$Branch == "South Bird���s Head" ] <- "South Bird's Head";
# Kinds of changes due to our recoding:
table_changes_2_ie <- table_changes_ie %>%
dplyr::mutate(Trill = ifelse(Trill=="yes","Trill","Other"),
revision = dplyr::case_when(revision == "ERROR" ~ "Error",
revision == "OUT" ~ "Contrast",
revision == "other" ~ "OTHER",
revision == "trilled" ~ "TRILL",
revision == "NA_" ~ "NA"),
revision = ifelse(is.na(revision),"NA",revision),
Data = ifelse(revision %in% c("TRILL","OTHER"),"Included","Excluded"));
table_changes_2_ie$revision <- factor(table_changes_2_ie$revision,levels = c("OTHER","Contrast","Error","NA","TRILL"));
data_R_revision_2_ie <- rough_r_data_ie %>%
dplyr::select(Language,Latitude,Longitude,revision,Trill) %>%
dplyr::mutate(revision = ifelse(revision=="trilled","TRILL",
ifelse(revision=="other","OTHER","OLD")),
Data = ifelse(revision%in%c("TRILL","OTHER"),"NEW","OLD")) %>%
dplyr::distinct();
data_R_revision_2_ie$revision <- factor(data_R_revision_2_ie$revision,levels = c("OTHER","TRILL","OLD"));
data_R_revision_ie <- rough_r_data_ie; # rename our recoded data
xling_revision_ie <- data_R_revision_ie %>%
dplyr::filter(Meaning %in% c("rough","smooth"),
Family!="Indo-European") %>%
dplyr::mutate(Trill = dplyr::case_when(revision == "trilled" ~ "yes",
revision == "other" ~ "no",
revision %in% c("OUT","NA") ~ "OUT")) %>%
dplyr::filter(Trill != "OUT");
xling_revision_ie$Meaning <- paste0("‘", xling_revision_ie$Meaning, "’");
xling_revision_ie$Meaning.f <- factor(xling_revision_ie$Meaning)#, levels=c("‘smooth’", "‘rough’"));
# some languages happen to have more than one rough / smooth words (very small minority!)
# reduce to single data point via majority rule:
xling_single_revision_ie <- xling_revision_ie %>%
dplyr::filter(Trill=="yes") %>%
dplyr::group_by(Language,Meaning.f) %>%
dplyr::summarise(r = as.logical(round(mean(r))),
Longitude=Longitude[1],
Latitude=Latitude[1]) %>%
dplyr::ungroup();
# Chunk 5
base_world +
ggplot2::geom_point(data =  data_R_revision_2 %>% dplyr::filter(Data=="OLD"),
ggplot2::aes(x=Longitude, y=Latitude, shape=Data), fill="red",
size=2, alpha=0.5)+
ggplot2::geom_point(data =  data_R_revision_2 %>% dplyr::filter(revision!="OLD"),
ggplot2::aes(x=Longitude, y=Latitude, fill=revision, shape=Data),
size=2, alpha=0.5) +
ggplot2::scale_fill_viridis_d(name = "Coded as", labels=c("other", "trill")) +
ggplot2::scale_shape_manual(values=c(21, 24),
name="Included?",
labels=c("yes", "no")) +
ggplot2::ggtitle(NULL) +
ggplot2::theme(legend.position="bottom") +
ggplot2::guides(fill=ggplot2::guide_legend(override.aes=list(shape = 21))) +
NULL;
# Chunk 6
d <- dplyr::filter(rough_r_data, !is.na(revision) & revision=="trilled" | revision=="other") %>%
dplyr::select(Longitude,Latitude,revision) %>% dplyr::distinct(); # no doubled entries in the table
base_world +
ggplot2::geom_point(data =  d,
ggplot2::aes(x=Longitude, y=Latitude, fill=revision), shape=21,
size=2, alpha=0.5) +
ggplot2::scale_fill_viridis_d(name = "Recoded as", labels=c("other", "trill")) +
ggplot2::ggtitle(NULL) +
ggplot2::theme(legend.position="bottom") +
NULL;
# Chunk 7
kable(sort(table(dplyr::filter(unique(dplyr::select(rough_r_data,Language,Family)),Family!="Indo-European")$Family), decreasing=TRUE)[1:10],
col.names=c("Family", "# languages"),
caption=capTab("The largest 10 families in our recoded dataset."));
# Chunk 8
kable(table(dplyr::filter(unique(dplyr::select(rough_r_data,Language,Area,Family)),Family!="Indo-European")$Area),
col.names=c("Area", "# languages"),
caption=capTab("The areas in our recoded dataset."));
# Chunk 9
ggplot2::ggplot(data = table_changes_2,
ggplot2::aes(axis1 = Trill, axis2 = revision, axis3 = Data, y = Freq)) +
ggalluvial::geom_alluvium(ggplot2::aes(fill = revision)) +
ggalluvial::geom_stratum(fill="grey90") +
ggplot2::geom_text(stat = ggalluvial::StatStratum,
ggplot2::aes(label = tolower(ggplot2::after_stat(stratum)))) +
ggplot2::scale_x_discrete(limits = c("Survey", "Response"),
expand = c(0.15, 0.05)) +
ggplot2::scale_fill_manual(values=c("OTHER"="gray50", "Error"="red", "TRILL"="yellow", "Contrast"="blue","NA"="black"),
labels=c("OTHER"="other", "Error"="error", "TRILL"="trill", "Contrast"="contrast","NA"="na"),
name="Recoding") +
ggplot2::theme_void() +
NULL;
# Chunk 10
base_world +
ggplot2::geom_sf(size=0.2, col="white", fill="lightgrey") +
ggplot2::coord_sf(xlim = c(-180, 180), ylim = c(-60, 80), datum=NA) +
ggplot2::geom_point(data = xling_single, ggplot2::aes(x = Longitude, y = Latitude, fill = r, group = NA),
alpha = 0.65, size = 2.5,
col="black", pch=21, stroke=0.75,
position = ggplot2::position_jitter(width=2.5,height=2.5,seed=1)) +
ggplot2::facet_grid(~Meaning.f) +
ggplot2::scale_fill_viridis_d(labels=c("no /r/", "contains /r/")) +
ggplot2::labs(title = "The original coding") +
theme_rough +
ggplot2::theme(
legend.position = "none",
axis.title = ggplot2::element_blank(),
axis.text = ggplot2::element_blank(),
axis.line = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank(),
plot.margin = ggplot2::unit(c(0.1,0.4,-0.4,0.4),"cm"),
panel.spacing = ggplot2::unit(0, "lines")) +
NULL;
base_world +
ggplot2::geom_sf(size=0.2, col="white", fill="lightgrey") +
ggplot2::coord_sf(xlim = c(-180, 180), ylim = c(-60, 80), datum=NA) +
ggplot2::geom_point(data = xling_single_revision, ggplot2::aes(x = Longitude, y = Latitude, fill = r, group = NA),
alpha = 0.65, size = 2.5,
col="black", pch=21, stroke=0.75,
position = ggplot2::position_jitter(width=2.5,height=2.5,seed=1)) +
ggplot2::facet_grid(~Meaning.f) +
ggplot2::scale_fill_viridis_d(labels=c("no /r/", "contains /r/")) +
ggplot2::labs(title = "The recoding") +
theme_rough +
ggplot2::theme(
legend.position = "bottom",
axis.title = ggplot2::element_blank(),
axis.text = ggplot2::element_blank(),
axis.line = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank(),
plot.margin = ggplot2::unit(c(0.1,0.4,-0.4,0.4),"cm"),
panel.spacing = ggplot2::unit(0, "lines")) +
NULL;
# Chunk 11
base_world +
ggplot2::geom_point(data =  data_R_revision_2_ie %>% dplyr::filter(Data=="OLD"),
ggplot2::aes(x=Longitude, y=Latitude, shape=Data), fill="red",
size=2, alpha=0.5)+
ggplot2::geom_point(data =  data_R_revision_2_ie %>% dplyr::filter(revision!="OLD"),
ggplot2::aes(x=Longitude, y=Latitude, fill=revision, shape=Data),
size=2, alpha=0.5) +
ggplot2::scale_fill_viridis_d(name = "Coded as", labels=c("other", "trill")) +
ggplot2::scale_shape_manual(values=c(21, 24),
name="Included?",
labels=c("yes", "no")) +
ggplot2::ggtitle(NULL) +
ggplot2::theme(legend.position="bottom") +
ggplot2::guides(fill=ggplot2::guide_legend(override.aes=list(shape = 21))) +
NULL;
# Chunk 12
d <- dplyr::filter(rough_r_data_ie, !is.na(revision) & revision=="trilled" | revision=="other") %>%
dplyr::select(Longitude,Latitude,revision) %>% dplyr::distinct(); # no doubled entries in the table
base_world +
ggplot2::geom_point(data =  d,
ggplot2::aes(x=Longitude, y=Latitude, fill=revision), shape=21,
size=2, alpha=0.5) +
ggplot2::scale_fill_viridis_d(name = "Recoded as", labels=c("other", "trill")) +
ggplot2::ggtitle(NULL) +
ggplot2::theme(legend.position="bottom") +
NULL;
# Chunk 13
kable(sort(table(unique(dplyr::select(rough_r_data_ie,Language,Family))$Family), decreasing=TRUE)[1:10],
col.names=c("Family", "# languages"),
caption=capTab("The largest 10 families in our recoded dataset."));
# Chunk 14
kable(table(unique(dplyr::select(rough_r_data_ie,Language,Area,Family))$Area),
col.names=c("Area", "# languages"),
caption=capTab("The areas in our recoded dataset."));
# Chunk 15
ggplot2::ggplot(data = table_changes_2_ie %>%
mutate("Trill"=factor(ifelse(Trill=="Trill","trilled /r/",Trill), levels=c("trilled /r/", "Other")),
"revision"=factor(ifelse(revision=="TRILL","TRILLED /r/", ifelse(revision=="NA","undecid.",as.character(revision))), levels=c("TRILLED /r/", "OTHER", "Contrast", "undecid.", "Error")),
"Data"=factor(Data, levels=c("Included", "Excluded"))),
ggplot2::aes(axis1 = Trill, axis2 = revision, axis3 = Data, y = Freq)) +
ggalluvial::geom_alluvium(ggplot2::aes(fill = revision)) +
#ggalluvial::geom_stratum(fill="grey95") +
#ggalluvial::geom_stratum(aes(fill=revision)) +
ggalluvial::geom_stratum(fill=c("deepskyblue", "lightyellow", "red", "gray50", "gray70", "deepskyblue", "lightyellow", "white", "darkseagreen1")) +
ggplot2::geom_text(stat = ggalluvial::StatStratum,
ggplot2::aes(label = tolower(ggplot2::after_stat(stratum))), color=c("black", "black", NA, "black", "black", "black", "black", "black", "black")) +
ggplot2::geom_text(stat = ggalluvial::StatAlluvium, position = position_nudge(0.25),
ggplot2::aes(label = Freq), alpha=0.75, color="grey20") +
ggplot2::geom_text(stat = ggalluvial::StatAlluvium, position = position_nudge(-0.25),
ggplot2::aes(label = Freq), alpha=0.75, color="grey20") +
ggplot2::geom_rect(xmin=-1, xmax=0.83, ymin=-10, ymax=1000, fill="white") + # stupid hack but works
ggplot2::geom_rect(xmin=3.18, xmax=15, ymin=-10, ymax=1000, fill="white") +
ggplot2::scale_x_discrete(limits = c("Survey", "Response"),
expand = c(0.15, 0.05)) +
ggplot2::scale_fill_manual(values=c("OTHER"="blue", "Error"="red", "TRILLED /r/"="yellow", "Contrast"="gray50", "undecid."="black"),
labels=c("OTHER"="other", "Error"="error", "TRILLED /r/"="trilled /r/", "Contrast"="contrast", "undecid."="undecidable"),
name="recoding:") +
ggplot2::theme_void() +
NULL;
# Save for paper:
ggplot2::ggsave("./figures/Figure1.jpg", device="jpeg", width=6, height=6, units="in", dpi=300, quality=85);
ggplot2::ggsave("./figures/Figure1.tif", device="tiff", width=6, height=6, units="in", dpi=300, compression="lzw", type="cairo", bg="white");
# Chunk 16
base_world +
ggplot2::geom_sf(size=0.2, col="white", fill="lightgrey") +
ggplot2::coord_sf(xlim = c(-180, 180), ylim = c(-60, 80), datum=NA) +
ggplot2::geom_point(data = xling_single_revision_ie, ggplot2::aes(x = Longitude, y = Latitude, fill = r, group = NA),
alpha = 0.65, size = 2.5,
col="black", pch=21, stroke=0.75,
position = ggplot2::position_jitter(width=2.5,height=2.5,seed=1)) +
ggplot2::facet_grid(~Meaning.f) +
ggplot2::scale_fill_viridis_d(labels=c("no /r/", "contains /r/")) +
ggplot2::labs(title = "The recoding") +
theme_rough +
ggplot2::theme(
legend.position = "bottom",
axis.title = ggplot2::element_blank(),
axis.text = ggplot2::element_blank(),
axis.line = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank(),
plot.margin = ggplot2::unit(c(0.1,0.4,-0.4,0.4),"cm"),
panel.spacing = ggplot2::unit(0, "lines")) +
NULL;
# Chunk 17
# Select the recoded languages with trill:
data_R_revision_trill_rs <- dplyr::filter(data_R_revision, revision=="trilled",
Meaning %in% c("rough","smooth"));
data_r_revision_trill_rs_1 <- data_R_revision_trill_rs %>%
dplyr::mutate(Trill=ifelse(revision=="trilled","yes"));
# recode as factors:
data_r_revision_trill_rs_1$rough <- factor(c("no", "yes")[as.numeric(data_r_revision_trill_rs_1$rough)+1], levels=c("no", "yes"));
data_r_revision_trill_rs_1$r     <- factor(c("no", "yes")[as.numeric(data_r_revision_trill_rs_1$r)+1],     levels=c("no", "yes"));
data_r_revision_trill_rs_1$l     <- factor(c("no", "yes")[as.numeric(data_r_revision_trill_rs_1$l)+1],     levels=c("no", "yes"));
# Chunk 18
file_name <- "./cached/xling_replic_withr.RData";
if( !file.exists(file_name) )
{
# cache these results:
## Frequentist ##
set.seed(314); # for replicability
m1 <- glmer(r ~ 1 + rough +
(1 + rough | Family) +
(1 + rough | Area),
data=data_r_revision_trill_rs_1 ,
family=binomial()); # singular fit
rePCA(m1); summary(m1); # seems to be the Area -> let' try to remove (rough | Area)
m2 <- update(m1, . ~ . - (1 + rough | Area) + (1 | Area)); summary(m2); anova(m1, m2); # all is good (and nova's p=0.94 and ΔAIC=-3.87 in favor of m1)
m0 <- update(m2, . ~ . - rough); summary(m0); rePCA(m0); # singular fit due to Area but it's the null model so it's probably ok...
anova(m2, m0); # better than the null (p=0.004, ΔAIC=-6.28)
plot_prefix <- "./figures/xling_glmer_rs_logistic_mod_r_revision";
plot_model(m2, type="pred", terms="rough"); ggsave(paste0(plot_prefix,"_pred.jpg"), device="jpeg", width=4, height=4, units="in", quality=85);
xling_glmer_rs_logistic_mod_r_revision_results <- list("model"=m2, # needed for later comparisons
"cmp_to_null"=anova(m2, m0), "plot_prefix"=plot_prefix);
## Bayesian ##
# check the priors that we can set:
get_prior(r ~ 1 + rough +
(1 + rough | Family) +
(1 + rough | Area),
data=data_r_revision_trill_rs_1 ,
family="bernoulli");
# setting the priors:
b1_priors <- c(
brms::set_prior("student_t(5,0,2.5)", class = "b"),
brms::set_prior("student_t(5,0,2.5)", class = "Intercept"),
brms::set_prior("lkj(2)", class = "cor"),
brms::set_prior("student_t(4,0,2)", class = "sd", coef = "Intercept", group="Family"),
brms::set_prior("student_t(4,0,2)", class = "sd", coef = "roughyes", group="Family"),
brms::set_prior("student_t(4,0,2)", class = "sd", coef = "Intercept", group="Area"),
brms::set_prior("student_t(4,0,2)", class = "sd", coef = "roughyes", group="Area")
); # for the full model
# prior predictive checks:
set.seed(314); # for replicability
b_prior <- brms::brm(r ~ 1 + rough +
(1 + rough | Family) +
(1 + rough | Area),
data=data_r_revision_trill_rs_1,
prior=b1_priors,
family="bernoulli",
sample_prior='only',  # needed for prior predictive checks
cores=brms_ncores, iter=2000, warmup=1000, thin=2, control=brms_control);
# save the results we need later on:
plot_prefix <- "./figures/xling_brm_rs_logistic_mod_r_revision";
g <- arrangeGrob(pp_check(b_prior, type='stat', sta ='min') + xlab('p(r)') + ggtitle('Prior predictive distribution of minimum values'),
pp_check(b_prior, type='stat', stat='mean') + xlab('p(r)') + ggtitle('Prior predictive distribution of means'),
pp_check(b_prior, type='stat', stat='max') + xlab('p(r)') + ggtitle('Prior predictive distribution of maximum values'),
ncol=1); # seems fine (the observed, y, does fall in the predicted distributions, y_{rep} for the max, mean and min, even if the mean is a bit off but not much)
as_ggplot(g); ggsave(paste0(plot_prefix,"_prior_predictive_checks.jpg"), plot=g, device="jpeg", width=6, height=4*3, units="in", quality=85);
# fit the logistic model:
set.seed(314); # for replicability
b1 <- brms::brm(r ~ 1 + rough +
(1 + rough | Family) +
(1 + rough | Area),
data=data_r_revision_trill_rs_1 ,
prior=b1_priors,
family="bernoulli",
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,  # needed for hypotheses tests
cores=brms_ncores, iter=brms_iter, warmup=brms_warmup, thin=brms_thin, control=brms_control);
summary(b1); mcmc_plot(b1, type="trace"); mcmc_plot(b1);
(hyps <- brms::hypothesis(b1, c("roughyes = 0", "roughyes > 0")));
(hdi95 <- hdi(b1, ci=0.95));
# posterior predictive checks
plot_prefix <- "./figures/xling_brm_rs_logistic_mod_r_revision";
mcmc_plot(b1, type="trace"); ggsave(paste0(plot_prefix,"_mcmctrace.jpg"), device="jpeg", width=7, height=6, units="in", quality=85);
mcmc_plot(b1); ggsave(paste0(plot_prefix,"_mcmcestim.jpg"), device="jpeg", width=7, height=4, units="in", quality=85);
plot_model(b1, type="pred", terms="rough"); ggsave(paste0(plot_prefix,"_pred.jpg"), device="jpeg", width=4, height=4, units="in", quality=85);
summary_mod <- capture.output(summary(b1));
probs_text <- capture.output(probs <- logistic_summary(b1, dat=data_r_revision_trill_rs_1, outcome="/r/", roughpred="rough", true_val="yes", pp_over_zero=TRUE));
pp_check(b1, ndraws=100) + xlab('p(r)') + ggtitle('Posterior predictive density overlay'); ggsave(paste0(plot_prefix,"_ppcheck_densoverlay.jpg"), device="jpeg", width=6, height=4, units="in", quality=85);
g <- arrangeGrob(pp_check(b1, type='stat', sta ='min') + xlab('p(r)') + ggtitle('Posterior predictive distribution of minimum values'),
pp_check(b1, type='stat', stat='mean') + xlab('p(r)') + ggtitle('Posterior predictive distribution of means'),
pp_check(b1, type='stat', stat='max') + xlab('p(r)') + ggtitle('Posterior predictive distribution of maximum values'),
ncol=1); # seems fine (the observed, y, does fall in the predicted distributions, y_{rep} for the max, mean and min)
as_ggplot(g); ggsave(paste0(plot_prefix,"_ppcheck_min_mean_max.jpg"), plot=g, device="jpeg", width=6, height=4*3, units="in", quality=85);
# model comparison with the null model:
b0_priors <- c(
brms::set_prior("student_t(5,0,2.5)", class = "Intercept"),
brms::set_prior("student_t(4,0,2)", class = "sd", coef = "Intercept", group="Family"),
brms::set_prior("student_t(4,0,2)", class = "sd", coef = "Intercept", group="Area")
); # for the null model
b0 <- brms::brm(r ~ 1 +
(1 | Family) +
(1 | Area),
data=data_r_revision_trill_rs_1 ,
prior=b0_priors,
family="bernoulli",
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,  # needed for hypotheses tests
cores=brms_ncores, iter=brms_iter, warmup=brms_warmup, thin=brms_thin, control=brms_control);
summary(b0);
mcmc_plot(b0, type="trace");
mcmc_plot(b0);
b0 <- brms_fit_indices(b0);
b1 <- brms_fit_indices(b1);
(modcmp <- brms_compare_models(b0, b1, "[null]", "[+ 'rough']"));
# --> clear positive effect of 'rough'
# compare with the default improper priors (prior sensitivity check):
set.seed(314); # for replicability
b1f <- brms::brm(r ~ 1 + rough +
(1 + rough | Family) +
(1 + rough | Area),
data=data_r_revision_trill_rs_1 ,
family="bernoulli",
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,  # needed for hypotheses tests
cores=brms_ncores, iter=brms_iter, warmup=brms_warmup, thin=brms_thin, control=brms_control);
summary(b1f); mcmc_plot(b1f, type="trace"); mcmc_plot(b1f);
(hyps_f <- brms::hypothesis(b1f, c("roughyes = 0", "roughyes > 0")));
(hdi95_f <- hdi(b1f, ci=0.95));
pp_check(b1f, ndraws=100) + xlab('p(r)') + ggtitle('Posterior predictive density overlay');
g <- arrangeGrob(pp_check(b1f, type='stat', sta ='min') + xlab('p(r)') + ggtitle('Posterior predictive distribution of minimum values'),
pp_check(b1f, type='stat', stat='mean') + xlab('p(r)') + ggtitle('Posterior predictive distribution of means'),
pp_check(b1f, type='stat', stat='max') + xlab('p(r)') + ggtitle('Posterior predictive distribution of maximum values'),
ncol=1); # seems fine (the observed, y, does fall in the predicted distributions, y_{rep} for the max, mean and min)
as_ggplot(g);
b1f <- brms_fit_indices(b1f);
(modcmp_f <- brms_compare_models(b1, b1f, "[custom prior]", "[default prior]")); # identical
xling_brm_rs_logistic_mod_r_revision_results <- list("model"=b1, # needed for later comparisons
"summary"=summary_mod, "hypotheses"=hyps, "hdi95"=hdi95, "cmp_to_null"=modcmp, "probs"=probs, "probs_text"=probs_text, "plot_prefix"=plot_prefix);
# save the results we need later on:
save(xling_brm_rs_logistic_mod_r_revision_results,
xling_glmer_rs_logistic_mod_r_revision_results,
file=file_name, compress="xz", compression_level=9); # save this model
} else
{
load(file_name);
}
if( !small_HTML ) paste0(xling_brm_rs_logistic_mod_r_revision_results$plot_prefix,"_prior_predictive_checks.jpg") else "./Image_not_available.jpg"
unlink("rrrugosity_revisited_cache", recursive = TRUE)
unlink("rrrugosity_revisited_cache", recursive = TRUE)
